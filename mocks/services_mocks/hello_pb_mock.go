// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bryansandoval/projects/kubester/deployments/submodules/kubert/services/grpc_service/hello.pb.go

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	x "."
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockGreeterClient is a mock of GreeterClient interface
type MockGreeterClient struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterClientMockRecorder
}

// MockGreeterClientMockRecorder is the mock recorder for MockGreeterClient
type MockGreeterClientMockRecorder struct {
	mock *MockGreeterClient
}

// NewMockGreeterClient creates a new mock instance
func NewMockGreeterClient(ctrl *gomock.Controller) *MockGreeterClient {
	mock := &MockGreeterClient{ctrl: ctrl}
	mock.recorder = &MockGreeterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreeterClient) EXPECT() *MockGreeterClientMockRecorder {
	return m.recorder
}

// PostHello mocks base method
func (m *MockGreeterClient) PostHello(ctx context.Context, in *x.PostHelloRequest, opts ...grpc.CallOption) (*x.PostHelloReply, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostHello", varargs...)
	ret0, _ := ret[0].(*x.PostHelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostHello indicates an expected call of PostHello
func (mr *MockGreeterClientMockRecorder) PostHello(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostHello", reflect.TypeOf((*MockGreeterClient)(nil).PostHello), varargs...)
}

// GetHello mocks base method
func (m *MockGreeterClient) GetHello(ctx context.Context, in *x.GetHelloRequest, opts ...grpc.CallOption) (*x.GetHelloReply, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHello", varargs...)
	ret0, _ := ret[0].(*x.GetHelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHello indicates an expected call of GetHello
func (mr *MockGreeterClientMockRecorder) GetHello(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHello", reflect.TypeOf((*MockGreeterClient)(nil).GetHello), varargs...)
}

// MockGreeterServer is a mock of GreeterServer interface
type MockGreeterServer struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterServerMockRecorder
}

// MockGreeterServerMockRecorder is the mock recorder for MockGreeterServer
type MockGreeterServerMockRecorder struct {
	mock *MockGreeterServer
}

// NewMockGreeterServer creates a new mock instance
func NewMockGreeterServer(ctrl *gomock.Controller) *MockGreeterServer {
	mock := &MockGreeterServer{ctrl: ctrl}
	mock.recorder = &MockGreeterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreeterServer) EXPECT() *MockGreeterServerMockRecorder {
	return m.recorder
}

// PostHello mocks base method
func (m *MockGreeterServer) PostHello(arg0 context.Context, arg1 *x.PostHelloRequest) (*x.PostHelloReply, error) {
	ret := m.ctrl.Call(m, "PostHello", arg0, arg1)
	ret0, _ := ret[0].(*x.PostHelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostHello indicates an expected call of PostHello
func (mr *MockGreeterServerMockRecorder) PostHello(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostHello", reflect.TypeOf((*MockGreeterServer)(nil).PostHello), arg0, arg1)
}

// GetHello mocks base method
func (m *MockGreeterServer) GetHello(arg0 context.Context, arg1 *x.GetHelloRequest) (*x.GetHelloReply, error) {
	ret := m.ctrl.Call(m, "GetHello", arg0, arg1)
	ret0, _ := ret[0].(*x.GetHelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHello indicates an expected call of GetHello
func (mr *MockGreeterServerMockRecorder) GetHello(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHello", reflect.TypeOf((*MockGreeterServer)(nil).GetHello), arg0, arg1)
}
