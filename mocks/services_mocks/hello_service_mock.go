// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bryansandoval/projects/kubester/deployments/submodules/kubert/services/hello_service/interface.go

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	grpc_service "github.com/bmsandoval/kubert/services/grpc_service"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mock_hello_service is a mock of Service interface
type Mock_hello_service struct {
	ctrl     *gomock.Controller
	recorder *Mock_hello_serviceMockRecorder
}

// Mock_hello_serviceMockRecorder is the mock recorder for Mock_hello_service
type Mock_hello_serviceMockRecorder struct {
	mock *Mock_hello_service
}

// NewMock_hello_service creates a new mock instance
func NewMock_hello_service(ctrl *gomock.Controller) *Mock_hello_service {
	mock := &Mock_hello_service{ctrl: ctrl}
	mock.recorder = &Mock_hello_serviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mock_hello_service) EXPECT() *Mock_hello_serviceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *Mock_hello_service) Get(request grpc_service.GetHelloRequest) ([]string, error) {
	ret := m.ctrl.Call(m, "Get", request)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *Mock_hello_serviceMockRecorder) Get(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mock_hello_service)(nil).Get), request)
}
